using System.Collections.ObjectModel;
using System.IO;
using System.Text;
using DevStats.Dashboard;

namespace DevStats.Plugins.CsStatistics;

public class CsStatisticsCardPlugin : ICardPlugin
{
  private readonly AppSettings _appSettings;
  private readonly List<FileStatItem> _csFiles = new();
  private int _autoGeneratedCount;
  private int _csFileAccessErrorCount;
  private int _csFileUsedCount;
  private int _csFileTotalCount;
  private CsStatisticsViewModel? _viewModel;
  private int _csFileZeroSizeCount;

  public string Name => "C# stats";
  public Type ViewType => typeof(CsStatisticsCardView);

  public CsStatisticsCardPlugin(AppSettings appSettings)
  {
    _appSettings = appSettings;
  }

  public void ClearData()
  {
    _csFiles.Clear();
    _csFileUsedCount = 0;
    _csFileAccessErrorCount = 0;
    _autoGeneratedCount = 0;
    _csFileZeroSizeCount = 0;
    _csFileTotalCount = 0;
    _viewModel?.ClearData();
  }

  public string GetMdText()
  {
    var sb = new StringBuilder();
    sb.AppendLine($"# {Name}");
    sb.AppendLine();
    sb.AppendLine($"- **Total .cs files scanned:** {_csFileTotalCount}");
    sb.AppendLine($"- **Analyzed .cs files:** {_csFileUsedCount}");
    sb.AppendLine($"- **Auto-generated files:** {_autoGeneratedCount}");
    sb.AppendLine($"- **Zero-size files:** {_csFileZeroSizeCount}"); 
    sb.AppendLine($"- **Files with access errors:** {_csFileAccessErrorCount}");


    var validFiles = _csFiles.Where(f => f.Size > 0).ToList();
    if (validFiles.Count > 0)
    {
      sb.AppendLine($"- **Min file size:** {validFiles.Min(f => f.Size)} bytes");
      sb.AppendLine($"- **Max file size:** {validFiles.Max(f => f.Size)} bytes");
      sb.AppendLine($"- **Average file size:** {validFiles.Average(f => f.Size):F2} bytes");
    }
    else
    {
      sb.AppendLine("- **No valid file sizes found.**");
    }

    sb.AppendLine();
    sb.AppendLine("## File Size Histogram");
    if (validFiles.Count > 0)
    {
      var histogram = CsFileSizeHistogramBuilder.BuildWithSamples(validFiles, _appSettings.HistogramMaxBins);
      //var histogram = CsFileSizeHistogramBuilder.BuildWithSamples(validFiles, 20);
      sb.AppendLine("| Range | Count | Sample File |");
      sb.AppendLine("|-------|-------|-------------|");
      foreach (var item in histogram)
      {
        sb.AppendLine($"| {item.Range} | {item.Count} | {item.SampleFile?.FileName ?? ""} |");
      }
    }
    else
    {
      sb.AppendLine("_No histogram data available._");
    }

    return sb.ToString();
  }

  public ICardViewModel GetOrCreateViewModel()
  {
    if (_viewModel != null)
    {
      return _viewModel;
    }

    _viewModel = new CsStatisticsViewModel(_appSettings);
    return _viewModel;
  }

  public void ProcessItem(string path, bool isFolder)
  {
    if (!isFolder && Path.GetExtension(path).Equals(".cs", StringComparison.OrdinalIgnoreCase))
    {
      _csFileTotalCount++; 

      // Ignore files with ".designer" in their name
      if (_appSettings.ExcludeAutogeneratedFiles &&
          Path.GetFileName(path).Contains(".designer", StringComparison.OrdinalIgnoreCase))
      {
        _autoGeneratedCount++;
        return;
      }

      try
      {
        var fileInfo = new FileInfo(path);
        if (fileInfo.Exists)
        {
          if (_appSettings.ExcludeAutogeneratedFiles)
          {
            var isAutoGenerated = IsAutoGenerated(path);

            if (isAutoGenerated)
            {
              _autoGeneratedCount++;
              // Do NOT add size for auto-generated files
            }
            else
            {
              if (fileInfo.Length == 0)
              {
                _csFileZeroSizeCount++;
              }
              else
              {
                _csFiles.Add(new FileStatItem
                {
                  FileName = fileInfo.Name,
                  Size = fileInfo.Length,
                  FilePath = fileInfo.FullName
                });
                _csFileUsedCount++;
              }
            }
          }
          else
          {
            if (fileInfo.Length == 0)
            {
              _csFileZeroSizeCount++;
            } 
            else
            {
              _csFiles.Add(new FileStatItem
              {
                FileName = fileInfo.Name,
                Size = fileInfo.Length,
                FilePath = fileInfo.FullName
              });
              _csFileUsedCount++;
            }
          }
        }
      }
      catch
      {
        _csFileAccessErrorCount++; // Count access errors
      }
    }
  }

  public void UpdateUi()
  {
    if (_viewModel != null)
    {
      var validFiles = _csFiles.Where(f => f.Size > 0).ToList();
      var histogramItems = CsFileSizeHistogramBuilder.BuildWithSamples(validFiles, _appSettings.HistogramMaxBins);
      _viewModel.HistogramItems = new ObservableCollection<CsFileSizeHistogramItem>(histogramItems);

      _viewModel.FileStatsItems = new ObservableCollection<FileStatItem>(
        validFiles.OrderByDescending(f => f.Size).Take(10)
          .Concat(validFiles.OrderBy(f => f.Size).Take(10))
          .Distinct()
          .ToList()
      );

      _viewModel.FilesCount = _csFileUsedCount;
      _viewModel.AccessErrorCount = _csFileAccessErrorCount;
      _viewModel.AutoGeneratedCount = _autoGeneratedCount;
      _viewModel.ZeroSizeFilesCount = _csFileZeroSizeCount;
      _viewModel.TotalFilesCount = _csFileTotalCount;
      if (validFiles.Count > 0)
      {
        _viewModel.MinSize = validFiles.Min(f => f.Size);
        _viewModel.MaxSize = validFiles.Max(f => f.Size);
        _viewModel.AverageSize = validFiles.Average(f => f.Size);
      }
      else
      {
        _viewModel.MinSize = 0;
        _viewModel.MaxSize = 0;
        _viewModel.AverageSize = 0;
      }
    }
  }

  private bool IsAutoGenerated(string path)
  {
    const int DefaultScanBytes = 1024;
    var scanBytes = _appSettings.AutogeneratedFileScanBytes;
    if (scanBytes < 1 || scanBytes > 100_000) // You can adjust the upper limit as needed
    {
      scanBytes = DefaultScanBytes;
    }

    try
    {
      using var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
      using var reader = new StreamReader(stream, Encoding.UTF8, true, 4096);
      var buffer = new char[scanBytes];
      var read = reader.Read(buffer, 0, buffer.Length);
      var content = new string(buffer, 0, read);

      foreach (var pattern in _appSettings.AutogeneratedFilePatterns)
      {
        if (!string.IsNullOrWhiteSpace(pattern) &&
            content.Contains(pattern, StringComparison.OrdinalIgnoreCase))
        {
          return true;
        }
      }

      return false;
    }
    catch
    {
      return false;
    }
  }
}
/*range chart scottplott*/