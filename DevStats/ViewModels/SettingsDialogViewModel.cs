using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using CommunityToolkit.Mvvm.Input;
using DevStats.Views;

namespace DevStats.ViewModels;

public class SettingsDialogViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;
    private readonly AppSettings _appSettings;

    public string AutogeneratedFilePatternsText
    {
        get => string.Join(Environment.NewLine, _appSettings.AutogeneratedFilePatterns);
        set
        {
            _appSettings.AutogeneratedFilePatterns = value
                .Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries)
                .ToList();
            OnPropertyChanged(nameof(AutogeneratedFilePatternsText));
        }
    }

    public int AutogeneratedFileScanBytes
    {
        get => _appSettings.AutogeneratedFileScanBytes;
        set
        {
            if (_appSettings.AutogeneratedFileScanBytes != value)
            {
                _appSettings.AutogeneratedFileScanBytes = value;
                OnPropertyChanged(nameof(AutogeneratedFileScanBytes));
            }
        }
    }

    public ICommand CommandCancel { get; }
    public ICommand CommandSave { get; }

    public bool ExcludeAutogeneratedFiles
    {
        get => _appSettings.ExcludeAutogeneratedFiles;
        set
        {
            if (_appSettings.ExcludeAutogeneratedFiles != value)
            {
                _appSettings.ExcludeAutogeneratedFiles = value;
                OnPropertyChanged(nameof(ExcludeAutogeneratedFiles));
            }
        }
    }

    public int HistogramMaxBins
    {
        get => _appSettings.HistogramMaxBins;
        set
        {
            if (_appSettings.HistogramMaxBins != value)
            {
                _appSettings.HistogramMaxBins = value;
                OnPropertyChanged(nameof(HistogramMaxBins));
            }
        }
    }

    public bool UseGitIgnore
    {
        get => _appSettings.UseGitIgnore;
        set
        {
            if (_appSettings.UseGitIgnore != value)
            {
                _appSettings.UseGitIgnore = value;
                OnPropertyChanged(nameof(UseGitIgnore));
            }
        }
    }

    public SettingsDialogViewModel(AppSettings appSettings)
    {
        _appSettings = appSettings;
        CommandSave = new RelayCommand(OnSave);
        CommandCancel = new RelayCommand(OnCancel);
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    private void CloseDialog(bool dialogResult)
    {
        foreach (Window window in Application.Current.Windows)
        {
            if (window is SettingsDialog dlg)
            {
                dlg.DialogResult = dialogResult;
                dlg.Close();
                break;
            }
        }
    }

    private void OnCancel()
    {
        CloseDialog(false);
    }

    private void OnSave()
    {
        _appSettings.Save();
        CloseDialog(true);
    }
}