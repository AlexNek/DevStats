using System.IO;
using System.Text.Json;

namespace DevStats;

public class AppSettings
{
    private static readonly string AppDataFolder = Path.Combine(
        Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
        "DevStats"
    );
    private static readonly string SettingsFilePath = Path.Combine(AppDataFolder, "appsettings.json");

    public List<string> AutogeneratedFilePatterns { get; set; } = new()
    {
        "<auto-generated>",
        "Code Generator",
        "Gremlin!",
        "Dieser Code wurde von einem Tool generiert.",
        "Author:  Code Generator",
        "generated by",
        "auto-generated",
        "// <auto-generated"
    };

    public int AutogeneratedFileScanBytes { get; set; } = 3500;
    public bool ExcludeAutogeneratedFiles { get; set; } = true;
    public int HistogramMaxBins { get; set; } = 20;
    public string LastOpenedFolderPath { get; set; } = string.Empty;
    public bool UseGitIgnore { get; set; } = true;

    public void Load()
    {
        if (File.Exists(SettingsFilePath))
        {
            var json = File.ReadAllText(SettingsFilePath);
            var loaded = JsonSerializer.Deserialize<AppSettings>(json);
            if (loaded != null)
            {
                ExcludeAutogeneratedFiles = loaded.ExcludeAutogeneratedFiles;
                AutogeneratedFileScanBytes = loaded.AutogeneratedFileScanBytes;
                AutogeneratedFilePatterns = loaded.AutogeneratedFilePatterns;
                UseGitIgnore = loaded.UseGitIgnore;
                HistogramMaxBins = loaded.HistogramMaxBins;
                LastOpenedFolderPath = loaded.LastOpenedFolderPath;
            }
        }
    }

    public void Save()
    {
        if (!Directory.Exists(AppDataFolder))
        {
            Directory.CreateDirectory(AppDataFolder);
        }
        var json = JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(SettingsFilePath, json);
    }
}